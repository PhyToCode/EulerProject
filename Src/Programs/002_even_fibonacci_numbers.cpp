/*******************************************************************************
* Problem 2 : Even Fibonacci Numbers                                           *
*                                                                              *
* Each new term in the Fibonacci sequence is generated by adding the previous  *
* two terms. By starting with 1 and 2, the first 10 terms will be:             *
*                                                                              *
*          1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...                              *
*                                                                              *
* By considering the terms in the Fibonacci sequence whose values do not       *
* exceed four million, find the sum of the even-valued terms.                  *
*******************************************************************************/

#include <eulermaths.h>

#define FOUR_MILLIONS 4000000

long long int fibonacci (int n)
{
    long long int fn_1 = 0; 
    long long int fn = 1;
    long long int fnp1 = 1;

    for (int k = 2; k < n; k++)
    {
        fnp1 = fn_1 + fn;
        fn_1 = fn;
        fn = fnp1;
    }

    return fnp1;
}

std::vector<long long int> fibonacciVector (int n)
{
    std::vector<long long int> fibo = {0, 1, 1};
    int size;

    for (int k = 2; k < n; k++)
    {
        size = fibo.size();
        fibo.push_back(fibo[size - 1] + fibo[size - 2]);
    }

    return fibo;
}

int main (int argc, char *argv[])
{
    /* Input processing */
    if (argc != 2)
    {
        std::cerr << "Usage : ./002_even_fibonacci_numbers n" << std::endl;
        return -1;
    }

    const int n = atoi(argv[1]);

    /* Variable declaration */
    long long int result_1 = 0;
    std::vector<long long int> result_vector;

    /* First Fibonacci Function */
    result_1 = fibonacci(n);

    /* Second Fibonacci Function */
    result_vector = fibonacciVector(n);

    long long int sum = 0;
    long long int value = 0;
    for (int k = 0; k < n; k++)
    {
        value = result_vector[k];
        if (value % 2 == 0 && value < FOUR_MILLIONS)
        {
            sum += value;
        }
    }


    /* Display of results */
    std::cout << "Result of Fibonacci(" << n << ") using Method 1 : " << result_1 << std::endl;
    std::cout << "Result of Fibonacci(" << n << ") using Method 2 : " << result_vector[n-1] << std::endl;
    std::cout << "Result of the problem 2 : " << sum << std::endl;

    return 0;
}